var missingNumber = function (nums) {
	/* 
    #===========================================================# 
    | 접근 방식 1                                               | 
    |-----------------------------------------------------------|
    | nums를 오름차순으로 정렬 후에 값을 하나씩 올려가며 확인   |
    #===========================================================#
    */
	let f = 0;
	for (let v of nums.sort((a, b) => a - b)) {
		if (f !== v) return f;
		f++;
	}
	return nums.length;

	/* 
    #===========================================================# 
    | 솔루션 방식 1                                             | 
    |-----------------------------------------------------------|
    | set에 nums를 넣고 0 ~ nums.length가 set안에 있는지 확인   |
    #===========================================================#
    */
	const s = new Set(nums);
	for (let i = 0; i <= nums.length; i++) {
		if (!s.has(i)) return i;
	}

	/* 
    #===========================================================================# 
    | 솔루션 방식 2                                                             | 
    |---------------------------------------------------------------------------|
    | XOR을 사용하여 같은 수가 나오면 0 아니면 없는 숫자가 나오는 법칙을 사용   |
    #===========================================================================#
    */
	let miss = nums.length;
	for (let i = 0; i < nums.length; i++) {
		miss ^= i ^ nums[i];
	}
	return miss;

	/* 
    #===========================================================================# 
    | 솔루션 방식 3                                                             | 
    |---------------------------------------------------------------------------|
    | 0~N 까지 모든 수를 더하면 N(N+1)/2가 나옴 따라서 nums을 다 더한 수를      |
    | 빼면 중간에 포함되어 있지 않은 값이 출력                                  |
    #===========================================================================#
    */
	const sum = (nums.length * (nums.length + 1)) / 2;
	return sum - nums.reduce((acc, val) => (acc += val), 0);
};
