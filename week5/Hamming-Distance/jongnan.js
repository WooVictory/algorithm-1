var hammingDistance = function (x, y) {
	/* 
    #===========================================================# 
    | 접근 방식 1                                               | 
    |-----------------------------------------------------------|
    | 두개의 수를 2진법으로 변경 및 각 자리수를 쪼개 배열화     |
    | 이 후, 배열의 크기를 맞추고(0을 앞에 추가) 각 자리가      |
    | 다르다면 카운팅                                           |
    #===========================================================#
    */
	const arrX = x.toString(2).split('');
	const arrY = y.toString(2).split('');

	while (arrX.length !== arrY.length) {
		if (arrX.length < arrY.length) {
			arrX.unshift('0');
		}
		if (arrX.length > arrY.length) {
			arrY.unshift('0');
		}
	}
	let cnt = 0;
	for (let i = 0; i < arrX.length; i++) {
		if (arrX[i] !== arrY[i]) {
			cnt++;
		}
	}
	return cnt;

	/* 
    #===========================================================# 
    | 접근 방식 2                                               | 
    |-----------------------------------------------------------|
    | 두 수를 XOR 연산을 하면 각 자리수가 다르면 1 같으면 0     |
    | 이를 나머지 연산자를 통해 해당 맨 끝 자리 수가 무엇인지   |
    | 판별 한 뒤 카운팅과 우 쉬프트 연산 처리                   |
    #===========================================================#
    */
	let cnt = 0;
	let a = x ^ y;
	while (a !== 0) {
		if (a % 2 === 1) cnt++;
		a >>= 1;
	}
	return cnt;
};
